{"version":3,"sources":["Components/ChessBoard.tsx","containers/Main.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["ChessBoard","state","chessBoard","resetBoard","selectedChessPiece","chessPieces","blackGrave","whiteGrave","playerWhiteTurn","this","initChessBoard","initChessPieces","rank","chessBoardFiles","file","toString","active","push","setState","id","type","color","piece","disabled","style","width","height","backgroundColor","border","onClick","setSelectedChessPiece","toUpperCase","chessPiece","board","top1","bottom1","top2","bottom2","left1","right1","left2","right2","postitionTL2","postitionTR2","postitionBL2","postitionBR2","postitionTL1","postitionTR1","postitionBL1","postitionBR1","left","right","positionL","positionR","amount","hasPiece","counter","postition","oldId","copyChessPieces","undefined","highlightTiles","checkPawnKill","Infinity","highlightLTiles","display","flexDirection","margin","map","i","boxShadow","ranks","Object","values","files","drawChessBoard","drawChessPiece","React","Component","Main","App","className","fetchCount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd7295de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ChessBoardProps = {\r\n\r\n};\r\n\r\ntype ChessBoardState = {\r\n    chessBoard: Array<any>;\r\n    resetBoard: Array<any>;\r\n    selectedChessPiece: any;\r\n    chessPieces: Object;\r\n    blackGrave: Array<any>;\r\n    whiteGrave: Array<any>;\r\n    playerWhiteTurn: Boolean;\r\n};\r\n\r\nexport class ChessBoard extends React.Component<ChessBoardProps, ChessBoardState> {\r\n    state: ChessBoardState = {\r\n        chessBoard: [],\r\n        resetBoard: [],\r\n        selectedChessPiece: null,\r\n        chessPieces: {},\r\n        blackGrave: [],\r\n        whiteGrave: [],\r\n        playerWhiteTurn: true\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.initChessBoard();\r\n        this.initChessPieces();\r\n    };\r\n\r\n    initChessBoard () {\r\n        const ranks = 8;\r\n        const files = 8;\r\n\r\n        let chessBoard = [];\r\n        for (let rank = 0; rank < ranks; rank++) {\r\n            let chessBoardFiles = {};\r\n            for (let file = 0; file < files; file++) {\r\n                let id = rank.toString() + file.toString();\r\n                chessBoardFiles[id] = {active: false};\r\n            };\r\n            chessBoard.push(chessBoardFiles);\r\n        };\r\n        this.setState({chessBoard: chessBoard, resetBoard: chessBoard});\r\n    };\r\n\r\n    initChessPieces () {\r\n        const ranks = 8;\r\n        const files = 8;\r\n\r\n        let chessPieces = {};\r\n        for (let rank = 0; rank < ranks; rank++) {\r\n            for (let file = 0; file < files; file++) {\r\n                let id = rank.toString() + file.toString();\r\n                if (rank === 0) {\r\n                    switch (file) {\r\n                        case 0:\r\n                            chessPieces[id] = {type:'rook', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                        case 1:\r\n                            chessPieces[id] = {type:'knight', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                        case 2:\r\n                            chessPieces[id] = {type:'bishop', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                        case 3:\r\n                            chessPieces[id] = {type:'queen', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                        case 4:\r\n                            chessPieces[id] = {type:'king', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                        case 5:\r\n                            chessPieces[id] = {type:'bishop', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                        case 6:\r\n                            chessPieces[id] = {type:'knight', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                        case 7:\r\n                            chessPieces[id] = {type:'rook', rank: rank, file: file, id: id, color: 'black'};\r\n                            break;\r\n                    }\r\n                } else if (rank === 1) {\r\n                    chessPieces[id] = {type:'pawn', rank: rank, file: file, id: id, color: 'black'};\r\n                } else if (rank === 6) {\r\n                    chessPieces[id] = {type:'pawn', rank: rank, file: file, id: id, color: 'white'};\r\n                } else if (rank === 7) {\r\n                    switch (file) {\r\n                        case 0:\r\n                            chessPieces[id] = {type:'rook', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                        case 1:\r\n                            chessPieces[id] = {type:'knight', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                        case 2:\r\n                            chessPieces[id] = {type:'bishop', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                        case 3:\r\n                            chessPieces[id] = {type:'queen', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                        case 4:\r\n                            chessPieces[id] = {type:'king', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                        case 5:\r\n                            chessPieces[id] = {type:'bishop', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                        case 6:\r\n                            chessPieces[id] = {type:'knight', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                        case 7:\r\n                            chessPieces[id] = {type:'rook', rank: rank, file: file, id: id, color: 'white'};\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.setState({chessPieces: chessPieces});\r\n    };\r\n\r\n    setSelectedChessPiece (piece) {\r\n        if ((piece.color === 'black' && !this.state.playerWhiteTurn) || (piece.color === 'white' && this.state.playerWhiteTurn)) {\r\n            this.setState({selectedChessPiece: piece});\r\n        }\r\n    };\r\n\r\n    drawChessPiece (piece, rank, file) {\r\n        if (piece.rank === rank && piece.file === file) {\r\n            if (piece.type === 'knight') {\r\n                if (piece.color === 'black') {\r\n                    return (\r\n                        <button disabled={piece.color === 'black' && this.state.playerWhiteTurn === true} style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: piece.color === 'black' ? '5px solid #888':'5px solid #eee'}} onClick={() => this.setSelectedChessPiece(piece)} key={piece}>\r\n                            <h5>N</h5>\r\n                        </button>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <button disabled={piece.color === 'white' && this.state.playerWhiteTurn !== true} style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: piece.color === 'black' ? '5px solid #888':'5px solid #eee'}} onClick={() => this.setSelectedChessPiece(piece)} key={piece}>\r\n                            <h5>N</h5>\r\n                        </button>\r\n                    )\r\n                }\r\n            } else {\r\n                if (piece.color === 'black') {\r\n                    return (\r\n                        <button disabled={piece.color === 'black' && this.state.playerWhiteTurn === true} style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: piece.color === 'black' ? '5px solid #888':'5px solid #eee'}} onClick={() => this.setSelectedChessPiece(piece)} key={piece}>\r\n                            <h5>{piece.type[0].toUpperCase()}</h5>\r\n                        </button>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <button disabled={piece.color === 'white' && this.state.playerWhiteTurn !== true} style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: piece.color === 'black' ? '5px solid #888':'5px solid #eee'}} onClick={() => this.setSelectedChessPiece(piece)} key={piece}>\r\n                            <h5>{piece.type[0].toUpperCase()}</h5>\r\n                        </button>\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    highlightLTiles(chessPiece, board) {\r\n        if ((chessPiece.color === 'black' && !this.state.playerWhiteTurn) || (chessPiece.color === 'white' && this.state.playerWhiteTurn)) {\r\n            const top1 = chessPiece.rank - 1;\r\n            const bottom1 = chessPiece.rank + 1;\r\n            const top2 = chessPiece.rank - 2;\r\n            const bottom2 = chessPiece.rank + 2;\r\n            const left1 = chessPiece.file + 1;\r\n            const right1 = chessPiece.file - 1;\r\n            const left2 = chessPiece.file + 2;\r\n            const right2 = chessPiece.file - 2;\r\n    \r\n            const postitionTL2 = top2.toString() + left1.toString();\r\n            const postitionTR2 = top2.toString() + right1.toString();\r\n            const postitionBL2 = bottom2.toString() + left1.toString();\r\n            const postitionBR2 = bottom2.toString() + right1.toString();\r\n    \r\n            const postitionTL1 = top1.toString() + left2.toString();\r\n            const postitionTR1 = top1.toString() + right2.toString();\r\n            const postitionBL1 = bottom1.toString() + left2.toString();\r\n            const postitionBR1 = bottom1.toString() + right2.toString();\r\n    \r\n            // TL2\r\n            if (top2 < 8 && top2 > -1 && left1 < 8 && left1 > -1) {\r\n                if (this.state.chessPieces[postitionTL2]) {\r\n                    if (this.state.chessPieces[postitionTL2].color !== chessPiece.color) {\r\n                        board[top2][postitionTL2].active = true;\r\n                    }\r\n                } else {\r\n                    board[top2][postitionTL2].active = true;\r\n                }\r\n            }\r\n    \r\n            // TR2\r\n            if (top2 < 8 && top2 > -1 && right1 < 8 && right1 > -1) {\r\n                if (this.state.chessPieces[postitionTR2]) {\r\n                    if (this.state.chessPieces[postitionTR2].color !== chessPiece.color) {\r\n                        board[top2][postitionTR2].active = true;\r\n                    }\r\n                } else {\r\n                    board[top2][postitionTR2].active = true;\r\n                }\r\n            }\r\n    \r\n            // BL2\r\n            if (bottom2 < 8 && bottom2 > -1 && left1 < 8 && left1 > -1) {\r\n                if (this.state.chessPieces[postitionBL2]) {\r\n                    if (this.state.chessPieces[postitionBL2].color !== chessPiece.color) {\r\n                        board[bottom2][postitionBL2].active = true;\r\n                    }\r\n                } else {\r\n                    board[bottom2][postitionBL2].active = true;\r\n                }\r\n            }\r\n    \r\n            // BR2\r\n            if (bottom2 < 8 && bottom2 > -1 && right1 < 8 && right1 > -1) {\r\n                if (this.state.chessPieces[postitionBR2]) {\r\n                    if (this.state.chessPieces[postitionBR2].color !== chessPiece.color) {\r\n                        board[bottom2][postitionBR2].active = true;\r\n                    }\r\n                } else {\r\n                    board[bottom2][postitionBR2].active = true;\r\n                }\r\n            }\r\n    \r\n            // -----\r\n    \r\n            // TL1\r\n            if (top1 < 8 && top1 > -1 && left2 < 8 && left2 > -1) {\r\n                if (this.state.chessPieces[postitionTL1]) {\r\n                    if (this.state.chessPieces[postitionTL1].color !== chessPiece.color) {\r\n                        board[top1][postitionTL1].active = true;\r\n                    }\r\n                } else {\r\n                    board[top1][postitionTL1].active = true;\r\n                }\r\n            }\r\n    \r\n            // TR1\r\n            if (top1 < 8 && top1 > -1 && right2 < 8 && right2 > -1) {\r\n                if (this.state.chessPieces[postitionTR1]) {\r\n                    if (this.state.chessPieces[postitionTR1].color !== chessPiece.color) {\r\n                        board[top1][postitionTR1].active = true;\r\n                    }\r\n                } else {\r\n                    board[top1][postitionTR1].active = true;\r\n                }\r\n            }\r\n    \r\n            // BL1\r\n            if (bottom1 < 8 && bottom1 > -1 && left2 < 8 && left2 > -1) {\r\n                if (this.state.chessPieces[postitionBL1]) {\r\n                    if (this.state.chessPieces[postitionBL1].color !== chessPiece.color) {\r\n                        board[bottom1][postitionBL1].active = true;\r\n                    }\r\n                } else {\r\n                    board[bottom1][postitionBL1].active = true;\r\n                }\r\n            }\r\n    \r\n            // BR1\r\n            if (bottom1 < 8 && bottom1 > -1 && right2 < 8 && right2 > -1) {\r\n                if (this.state.chessPieces[postitionBR1]) {\r\n                    if (this.state.chessPieces[postitionBR1].color !== chessPiece.color) {\r\n                        board[bottom1][postitionBR1].active = true;\r\n                    }\r\n                } else {\r\n                    board[bottom1][postitionBR1].active = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    checkPawnKill(chessPiece, board) {\r\n        let rank = chessPiece.rank;\r\n        const left = chessPiece.file - 1;\r\n        const right = chessPiece.file + 1;\r\n        if (chessPiece.color === 'white') {\r\n            rank -= 1;\r\n        } else {\r\n            rank += 1;\r\n        }\r\n\r\n        const positionL = rank.toString() + left.toString();\r\n        const positionR = rank.toString() + right.toString();\r\n\r\n        if (this.state.chessPieces[positionL] && this.state.chessPieces[positionL].color !== chessPiece.color) {\r\n            board[rank][positionL].active = true;\r\n        }\r\n\r\n        if (this.state.chessPieces[positionR] && this.state.chessPieces[positionR].color !== chessPiece.color) {\r\n            board[rank][positionR].active = true;\r\n        }\r\n    };\r\n\r\n    highlightTiles(chessPiece, board, amount, type) {\r\n        if ((chessPiece.color === 'black' && !this.state.playerWhiteTurn) || (chessPiece.color === 'white' && this.state.playerWhiteTurn)) {\r\n            let hasPiece = false;\r\n            let counter = 0;\r\n            let rank = chessPiece.rank;\r\n            let file = chessPiece.file;\r\n    \r\n            while (true) {\r\n                if (type === 'North') {\r\n                    rank -= 1;\r\n                } else if (type === 'East') {\r\n                    file += 1;\r\n                } else if (type === 'South') {\r\n                    rank += 1;\r\n                } else if (type === 'West') {\r\n                    file -= 1;\r\n                } else if (type === 'North East') {\r\n                    rank -= 1;\r\n                    file += 1;\r\n                } else if (type === 'South East') {\r\n                    rank += 1;\r\n                    file += 1;\r\n                } else if (type === 'North West') {\r\n                    rank -= 1;\r\n                    file -= 1;\r\n                } else if (type === 'South West') {\r\n                    rank += 1;\r\n                    file -= 1;\r\n                }\r\n    \r\n                let postition = rank.toString() + file.toString();\r\n                if (rank === -1 || rank === 8 || file === -1 || file === 8 || counter === amount) {\r\n                    break;\r\n                } else if (this.state.chessPieces[postition] && this.state.chessPieces[postition].rank === rank && this.state.chessPieces[postition].file === file) {\r\n                    if (hasPiece === false && this.state.chessPieces[postition].color !== chessPiece.color && chessPiece.type !== 'pawn') {\r\n                        // hasPiece == false && this.state.chessPieces[postition].color !== chessPiece.color\r\n                        board[rank][postition].active = true;\r\n                        hasPiece = true;\r\n                    }\r\n                    break;\r\n                } else {\r\n                    \r\n                    board[rank][postition].active = true;\r\n                }\r\n                counter += 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    resetBoard () {\r\n        const ranks = 8;\r\n        const files = 8;\r\n        let board = this.state.chessBoard;\r\n        for (let rank = 0; rank < ranks; rank++) {\r\n            for (let file = 0; file < files; file++) {\r\n                let id = rank.toString() + file.toString();\r\n                board[rank][id].active = false;\r\n            };\r\n        };\r\n\r\n        this.setState({chessBoard:board});\r\n    };\r\n\r\n    drawChessBoard (rank, file) {\r\n        const id = rank.toString() + file.toString();\r\n        let board = this.state.chessBoard;\r\n\r\n        if (board[rank][id].active === true) {\r\n            this.setState({playerWhiteTurn: !this.state.playerWhiteTurn});\r\n            const oldId = this.state.selectedChessPiece.id;\r\n            let copyChessPieces = {...this.state.chessPieces};\r\n            copyChessPieces[this.state.selectedChessPiece.id].rank = rank;\r\n            copyChessPieces[this.state.selectedChessPiece.id].file = file;\r\n\r\n            if (copyChessPieces[id]) {\r\n                if (copyChessPieces[id].color === 'black') {\r\n                    this.state.blackGrave.push(copyChessPieces[id]);\r\n                } else {\r\n                    this.state.whiteGrave.push(copyChessPieces[id]);\r\n                }\r\n            }\r\n\r\n            copyChessPieces[id] = this.state.selectedChessPiece;\r\n            copyChessPieces[id].id = id;\r\n\r\n            delete copyChessPieces[oldId];\r\n\r\n            this.setState({selectedChessPiece: null, chessPieces: copyChessPieces});\r\n            this.resetBoard();\r\n        } else {\r\n            let chessPiece = this.state.chessPieces[id];\r\n            this.resetBoard();\r\n            if (chessPiece !== undefined) {\r\n                if (chessPiece.type === 'pawn' && chessPiece.color === 'white') {\r\n                    if (rank === 6) {\r\n                        this.highlightTiles(chessPiece, board, 2, 'North');\r\n                    } else {\r\n                        this.highlightTiles(chessPiece, board, 1, 'North');\r\n                    }\r\n                    this.checkPawnKill(chessPiece, board);\r\n                } else if (chessPiece.type === 'pawn' && chessPiece.color === 'black') {\r\n                    if (rank === 1) {\r\n                        this.highlightTiles(chessPiece, board, 2, 'South');\r\n                    } else {\r\n                        this.highlightTiles(chessPiece, board, 1, 'South');\r\n                    }\r\n                    this.checkPawnKill(chessPiece, board);\r\n                } else if (chessPiece.type === 'rook') {\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'North');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'East');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'South');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'West');\r\n                } else if (chessPiece.type === 'knight') {\r\n                    this.highlightLTiles(chessPiece, board);\r\n                } else if (chessPiece.type === 'bishop') {\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'North East');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'North West');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'South East');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'South West');\r\n                } else if (chessPiece.type === 'queen') {\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'North');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'East');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'South');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'West');\r\n    \r\n                    this.highlightTiles(chessPiece, board, Infinity, 'North East');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'North West');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'South East');\r\n                    this.highlightTiles(chessPiece, board, Infinity, 'South West');\r\n                } else { // king\r\n                    this.highlightTiles(chessPiece, board, 1, 'North');\r\n                    this.highlightTiles(chessPiece, board, 1, 'East');\r\n                    this.highlightTiles(chessPiece, board, 1, 'South');\r\n                    this.highlightTiles(chessPiece, board, 1, 'West');\r\n                    \r\n                    this.highlightTiles(chessPiece, board, 1, 'North East');\r\n                    this.highlightTiles(chessPiece, board, 1, 'North West');\r\n                    this.highlightTiles(chessPiece, board, 1, 'South East');\r\n                    this.highlightTiles(chessPiece, board, 1, 'South West');\r\n                }\r\n    \r\n                this.setState({chessBoard:board});\r\n            }\r\n        }\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <div style={{width: '100vw', height: '100vh', display: 'flex', flexDirection: 'column'}}>\r\n                    <div style={{display: 'flex', margin: '0 auto 0 auto', width: '900px'}}>\r\n                        <div style={{\r\n                            width: '4em', \r\n                            height: '4em', \r\n                            border: '1px solid white',\r\n                        }}>\r\n                            <button style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: '5px solid #888'}}>\r\n                                <p>+</p>\r\n                            </button>\r\n                        </div>\r\n                        {this.state.blackGrave.map((piece, i) => (\r\n                            <div key={i} style={{\r\n                                width: '4em', \r\n                                height: '4em', \r\n                                border: '1px solid white'\r\n                            }}>\r\n                                <button style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: piece.color === 'black' ? '5px solid #888':'5px solid #eee'}} key={i}>\r\n                                    <p>{piece.type[0].toUpperCase()}</p>\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div style={{margin: 'auto', boxShadow: '0 0 30px 10px #eee'}}>\r\n                        {this.state.chessBoard.map((ranks, rank) => (\r\n                            <div style={{display:'flex'}} key={rank}>\r\n                                {Object.values(ranks).map((files, file) => (\r\n                                    <div onClick={() => {this.drawChessBoard(rank, file)}} key={file} style={{\r\n                                            width: '4em', \r\n                                            height: '4em', \r\n                                            border: '1px solid #ccc', \r\n                                            backgroundColor: this.state.chessBoard[rank][rank.toString()+file.toString()].active ? '#ddd':'white'\r\n                                        }}>\r\n                                        {Object.values(this.state.chessPieces).map((piece) => (\r\n                                            this.drawChessPiece(piece, rank, file)\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div style={{display: 'flex', margin: '0 auto 0 auto', width: '900px'}}>\r\n                        <div style={{\r\n                            width: '4em', \r\n                            height: '4em', \r\n                            border: '1px solid white',\r\n                        }}>\r\n                            <button style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: '5px solid #eee'}}>\r\n                                <p>+</p>\r\n                            </button>\r\n                        </div>\r\n                        {this.state.whiteGrave.map((piece, i) => (\r\n                            <div key={i} style={{\r\n                                width: '4em', \r\n                                height: '4em', \r\n                                border: '1px solid white',\r\n                            }}>\r\n                                <button style={{width: '100%', height: '100%', backgroundColor: 'transparent', border: piece.color === 'black' ? '5px solid #888':'5px solid #eee'}} key={i}>\r\n                                    <p>{piece.type[0].toUpperCase()}</p>\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\n// import styles from './Main.module.css';\r\n\r\nimport { ChessBoard } from '../Components/ChessBoard';\r\n\r\nexport function Main() {\r\n    return (\r\n        <div>\r\n            <ChessBoard />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { Main } from './containers/Main';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise<{ data: number }>((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState, AppThunk } from '../../app/store';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nexport interface CounterState {\r\n  value: number;\r\n  status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount: number) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount: number): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}